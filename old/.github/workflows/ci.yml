name: NixOS Configuration CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly builds to catch upstream issues
    - cron: '0 2 * * *'

jobs:
  lint-and-validate:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: nixos-config
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Check flake
      run: nix flake check --no-build
    
    - name: Run validation script
      run: ./scripts/validate-config.sh
    
    - name: Run health checks
      run: ./scripts/health-check.sh

  build-configurations:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    strategy:
      matrix:
        config: [vm-test]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: nixos-config
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Build NixOS configuration
      run: |
        nix build .#nixosConfigurations.${{ matrix.config }}.config.system.build.toplevel \
          --show-trace --fallback
    
    - name: Build VM
      run: |
        nix build .#nixosConfigurations.${{ matrix.config }}.config.system.build.vm \
          --show-trace --fallback

  build-home-configurations:
    runs-on: ubuntu-latest
    needs: lint-and-validate
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: nixos-config
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Get home configurations
      id: get-configs
      run: |
        configs=$(nix eval --json .#homeConfigurations --apply builtins.attrNames | jq -r '.[]' | tr '\n' ' ')
        echo "configs=$configs" >> $GITHUB_OUTPUT
    
    - name: Build home configurations
      run: |
        for config in ${{ steps.get-configs.outputs.configs }}; do
          echo "Building home configuration: $config"
          nix build .#homeConfigurations.$config.activationPackage \
            --show-trace --fallback
        done

  test-vm:
    runs-on: ubuntu-latest
    needs: build-configurations
    if: github.event_name != 'schedule'  # Skip VM tests on scheduled runs
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: nixos-config
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Enable KVM
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm
        sudo usermod -a -G kvm $USER
    
    - name: Run VM tests
      run: |
        timeout 300 ./scripts/test-vm.sh || true

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install markdownlint
      run: npm install -g markdownlint-cli
    
    - name: Lint documentation
      run: markdownlint docs/*.md README.md
    
    - name: Check for broken links
      run: |
        # Simple check for common issues
        grep -r "](http" docs/ README.md || true
        grep -r "homes/obsolete/" docs/ README.md && exit 1 || true

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: github/super-linter@v5
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        VALIDATE_ALL_CODEBASE: false
        VALIDATE_BASH: true
        VALIDATE_MARKDOWN: true
        VALIDATE_YAML: true

  performance-test:
    runs-on: ubuntu-latest
    needs: build-configurations
    if: github.event_name == 'schedule'  # Only on nightly builds
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: nixos-config
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    
    - name: Run performance tests
      run: ./scripts/test-all.sh benchmark
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: test-results/benchmark.log
